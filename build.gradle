buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = "TFGCore-Modern"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    enableIdeaPrepareRuns = true
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'INFO'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('runs/client')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory project.file('runs/server')

            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('runs/game-test')

            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('runs/data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.jozufozu.flywheel")
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }

    maven { url "https://maven.shedaniel.me/" }

    maven {
        url "https://squiddev.cc/maven/"
        content {
            includeGroup("cc.tweaked")
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }

    flatDir {
        dir 'libs'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation fg.deobf("maven.modrinth:architectury-api:9.2.14+forge")
    implementation fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.3")
    implementation fg.deobf("curse.maven:configuration-444699:4710266")

    implementation fg.deobf("maven.modrinth:embeddium:0.3.18+mc1.20.1")
    implementation fg.deobf("maven.modrinth:ferrite-core:DG5Fn9Sz")

    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-common-api:15.3.0.7"))
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.3.0.7"))
    // at runtime, use the full JEI jar for Forge
    compileOnly(fg.deobf("mezz.jei:jei-1.20.1-forge:15.3.0.7"))

    // REI
    //runtimeOnly fg.deobf("me.shedaniel.cloth:cloth-config-forge:11.1.118")
    //runtimeOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-forge:12.1.725")

    //compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-api-forge:12.1.725")
    //compileOnly fg.deobf("me.shedaniel:RoughlyEnoughItems-default-plugin-forge:12.1.725")

    // EMI
//    compileOnly fg.deobf("dev.emi:emi-forge:1.1.12+1.20.1:api")
//    runtimeOnly fg.deobf("dev.emi:emi-forge:1.1.12+1.20.1")
    implementation fg.deobf("dev.emi:emi-forge:1.1.13+1.20.1")

    // Create
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-1.20.1:0.6.10-10")
    implementation fg.deobf("com.simibubi.create:create-1.20.1:0.5.1.f-27:slim") { transitive = false }

    // Railways
    compileOnly fg.deobf("maven.modrinth:create-steam-n-rails:1.6.4+forge-mc1.20.1")

    // GTM
    implementation fg.deobf("maven.modrinth:ldlib:mc1.20.1-1.0.27.b-forge")
    implementation fg.deobf("curse.maven:gregtechceu-modern-890405:5713445-sources-5713449"){ transitive = false }

    // KJS
    implementation fg.deobf("maven.modrinth:rhino:2001.2.2-build.18+forge")
    implementation fg.deobf("maven.modrinth:kubejs:2001.6.5-build.7+forge")

    // TFC
    implementation fg.deobf("maven.modrinth:patchouli:1.20.1-84-forge")
    implementation fg.deobf("maven.modrinth:terrafirmacraft:3.2.3")

    // FirmaLife
    implementation fg.deobf("maven.modrinth:firmalife:2.1.3")

    // TFC-Ambiental
    implementation fg.deobf("maven.modrinth:curios:5.7.2+1.20.1")
    implementation fg.deobf("maven.modrinth:tfc-ambiental-second-edition:1.20.1-3.2.0")

    // FirmaCiv
//    compileOnly fg.deobf("maven.modrinth:firmacivilization:0.2.10-alpha-1.20.1") { transitive = false }//todo

    // TFC AstikoCarts
    compileOnly fg.deobf("curse.maven:astikor-carts-redux-916493:4988266") { transitive = false }
    compileOnly fg.deobf("curse.maven:astikor-carts-tfc-844019:5141430") { transitive = false }

    // AE2
    implementation fg.deobf("maven.modrinth:ae2:15.2.3")

    // ComputerCraft
    compileOnly ("cc.tweaked:cc-tweaked-1.20.1-core-api:1.111.0")
    compileOnly (fg.deobf("cc.tweaked:cc-tweaked-1.20.1-forge-api:1.111.0"))
    compileOnly (fg.deobf("cc.tweaked:cc-tweaked-1.20.1-forge:1.111.0"))

    // FTB
    implementation fg.deobf("curse.maven:ftb-teams-404468:4623116") { transitive = false }
    implementation fg.deobf("curse.maven:ftb-library-404465:4864329") { transitive = false }

    // Jade
    implementation fg.deobf("maven.modrinth:jade:11.7.1")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.6")) {
        jarJar.ranged(it, "[0.3.6,)")
    }
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}