buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply from: 'gradle/scripts/helpers.gradle'
apply plugin: 'org.spongepowered.mixin'

// Early Assertions
assertProperty 'mod_version'
assertProperty 'mod_package'
assertProperty 'mod_id'
assertProperty 'mod_name'
assertProperty 'mod_name_suffix'

base {
    version = propertyString('mod_version')
    group = propertyString('mod_package')
    archivesName = propertyString('mod_name', 'mod_name_suffix')
}


java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(java_version))
    }
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    enableIdeaPrepareRuns = true
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'INFO'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run/client')

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run/game-test')

            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run/data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name "Tterrag"
        url  "https://modmaven.dev/"
        content {
            includeGroup("com.tterrag.registrate")
        }
    }
    maven {
        name "TerraformersMC"
        url "https://maven.terraformersmc.com/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly 'org.jetbrains:annotations:26.0.+'
    annotationProcessor 'org.jetbrains:annotations:26.0.+'

    compileOnly 'org.projectlombok:lombok:1.18.+'
    annotationProcessor 'org.projectlombok:lombok:1.18.+'

    compileOnly fg.deobf("com.tterrag.registrate:Registrate:MC1.20-1.3.11")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6")
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.6")) {
        jarJar.ranged(it, "[0.3.6,)")
    }
}

apply from: 'dependencies.gradle'

processResources {
    var replaceProperties = [
            'mod_id': propertyString('mod_id'),
            'mod_name': propertyString('mod_name'),
            'mod_version': propertyString('mod_version'),
            'mod_description': propertyString('mod_description'),
            'mod_authors': propertyString('mod_authors'),
            'mod_credits': propertyString('mod_credits'),
            'mod_url': propertyString('mod_url'),
            'mod_update_json': propertyString('mod_update_json'),
            'mod_logo_path': propertyString('mod_logo_path'),

            'minecraft_version': propertyString('minecraft_version'),
            'minecraft_version_range': propertyString('minecraft_version_range'),

            'forge_version': propertyString('forge_version'),
            'forge_version_range': propertyString('forge_version_range'),
            'loader_version_range': propertyString('loader_version_range')
    ]
    var filterList = [
            'META-INF/mods.toml',
            'pack.mcmeta'
    ]

    inputs.properties replaceProperties
    filesMatching(filterList) { fcd ->
        fcd.expand(replaceProperties + [project: project])
    }
}



// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title":  propertyString('mod_id'),
                "Specification-Vendor": propertyString('mod_authors'),
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": propertyString('mod_name'),
                "Implementation-Version":  propertyString('mod_version'),
                "Implementation-Vendor": propertyString('mod_authors'),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
