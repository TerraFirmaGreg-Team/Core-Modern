buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id "dev.architectury.loom" version "1.3-SNAPSHOT"
}

//apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
}

loom {
    // use this if you are using the official mojang mappings
    // and want loom to stop warning you about their license
    silentMojangMappingsLicense()

    // since loom 0.10, you are **required** to use the
    // "forge" block to configure forge-specific features,
    // such as the mixinConfigs array or datagen
    forge {
        // specify the mixin configs used in this mod
        // this will be added to the jar manifest as well!
        mixinConfigs = [
                "${mod_id}.mixins.json"
        ]

        // missing access transformers?
        // don't worry, you can still use them!
        // note that your AT *MUST* be located at
        // src/main/resources/META-INF/accesstransformer.cfg
        // to work as there is currently no config option to change this.
        // also, any names used in your access transformer will need to be
        // in SRG mapped ("func_" / "field_" with MCP class names) to work!
        // (both of these things may be subject to change in the future)
    }

    runs {
        data {
            data()
            programArgs "--all", "--mod", mod_id
            programArgs "--output", file("src/generated").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }

}

/*
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            property 'forge.logging.markers', 'REGISTRIES'


            property 'forge.logging.console.level', 'info'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run/client')

            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            workingDirectory project.file('run/game-test')

            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run/data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}*/

/*
mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
}*/

sourceSets {
    main {
        resources.srcDir file("src/generated")
    }
}

repositories {
    mavenCentral()
    maven {
        name 'FirstDarkDev'
        url "https://maven.firstdarkdev.xyz/snapshots/"
    }
    maven {
        name 'Quilt'
        url 'https://maven.quiltmc.org/repository/release/'
    }
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        url "https://maven.saps.dev/releases/"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { // Registrate
        url = "https://maven.tterrag.com/"
        content {
            // need to be specific here due to version overlaps
            includeGroup("com.jozufozu.flywheel")
            includeGroup("com.tterrag.registrate")
            includeGroup("com.simibubi.create")
        }
    }
    maven {
        // Patchouli, JEI
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
        // Curse Forge File
        url "https://cursemaven.com/"
        content {
            includeGroup "curse.maven"
        }
    }
    maven { // FTB Mods
        url "https://maven.saps.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }
    maven {
        url "https://maven.saps.dev/snapshots"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.ftb.mods"
        }
    }
    maven {
        url "https://maven.ftb.dev/snapshots"
        content {
            includeGroup "dev.ftb.mods"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // layered mappings - Mojmap names, parchment and QM docs and parameters
    mappings loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_mappings}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    }

    modImplementation("top.theillusivec4.curios:curios-forge:${curios_version}+${minecraft_version}") { transitive = false }
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")
    modImplementation("curse.maven:configuration-444699:${configuration_version}")

    modImplementation("dev.latvian.mods:rhino-forge:${rhino_version}")
    modImplementation("dev.latvian.mods:kubejs-forge:${kubejs_version}")

    modImplementation("com.lowdragmc.ldlib:ldlib-forge-1.20.1:1.0.22") { transitive = false }
    modImplementation("com.gregtechceu.gtceu:gtceu-forge-1.20.1:1.0.18.a") { transitive = false }

    modImplementation("com.jozufozu.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    modImplementation("com.simibubi.create:create-1.20.1:0.5.1.f-26:slim") { transitive = false }

    modImplementation("vazkii.patchouli:Patchouli:1.20.1-84-FORGE")
    modImplementation("curse.maven:tfc-302973:${tfc_version}")
    modImplementation("curse.maven:tfcambiental-940350:${tfcambiental_version}")
    modImplementation("curse.maven:firmacivilization-714158:4987747")

    modImplementation("curse.maven:ae2-223794:${ae2_version}") { transitive = false }

    modCompileOnly("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}") { transitive = false }
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}") { transitive = false }
    // modRuntimeOnly("mezz.jei:jei-${minecraft_version}-forge:${jei_version}") { transitive = false } // Крашит сука

    modImplementation("curse.maven:ftb-teams-404468:4623116") { transitive = false }
    modImplementation("curse.maven:ftb-library-404465:4864329") { transitive = false }

    modImplementation("curse.maven:simple-login-312664:${simplelogin_version}")

    // Performance
    modImplementation("curse.maven:modernfix-790626:4980929")
    modImplementation("curse.maven:embeddium-908741:4984832")

    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:${project.mixinextras_version}"))
    implementation(include("io.github.llamalad7:mixinextras-forge:${project.mixinextras_version}"))

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jar {
    archiveFileName = mod_name + "-1.20.x-" + mod_version + ".jar"
}